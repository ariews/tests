<?php
require_once dirname( dirname( dirname( __FILE__ ) ) ) . DIRECTORY_SEPARATOR . 'phpunit_bootstrap.php';

/**
 * Test class for MultiByte.
 * Generated by PHPUnit on 2010-03-10 at 11:03:42.
 */
class system_classes_MultiByteNativeTest extends PHPUnit_Framework_TestCase {

	// our test strings, in numeric entities to prevent editor or os butchering
	private $test_strings = array(
		'lowercase' => '&#1087;&#1088;&#1080;&#1074;&#1077;&#1090;',	// привет
		'ucfirst' => '&#1055;&#1088;&#1080;&#1074;&#1077;&#1090;',		// Привет
		'uppercase' => '&#1055;&#1056;&#1048;&#1042;&#1045;&#1058;',	// ПРИВЕТ
		'international' => 'n2&#226;7t I&#241;t&#235;rn&#226;ti&#244;n&#224;liz&#230;ti&#248;n l13iz&#230;42ti&#248;n',	// n2â7t Iñtërnâtiônàlizætiøn l13izæ42tiøn
		'international_substr_1_3' => '2&#226;7',	// 2â7
		'international_substr_5' => ' I&#241;t&#235;rn&#226;ti&#244;n&#224;liz&#230;ti&#248;n l13iz&#230;42ti&#248;n',	// note the leading space -  Iñtërnâtiônàlizætiøn l13izæ42tiøn
		'strpos' => '&#1080;',	// и
		'strpos2' => '&#226;', // â
		'lowercase_sentence' => '&#1082;&#1086;&#1088;&#1086;&#1074;&#1099; &#1080;&#1076;&#1091;&#1090; &#1084;&#1091;',	// коровы идут му
		'ucwords_sentence' => '&#1050;&#1086;&#1088;&#1086;&#1074;&#1099; &#1048;&#1076;&#1091;&#1090; &#1052;&#1091;',	// Коровы Идут Му
	);
	
	// stores the library in use so we can restore it in tearDown()
	private $old_library;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 *
	 * @access protected
	 */
	protected function setUp()
	{
		
		$convmap = array( 0x0080, 0xffff, 0, 0xffff );
		
		foreach ( $this->test_strings as $key => $value ) {
			
			$this->test_strings[ $key ] = mb_decode_numericentity( $value, $convmap, 'utf-8' );
			
		}
		
		// disable using a multibyte library
		$this->old_library = MultiByte::library(false);
		
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 *
	 * @access protected
	 */
	protected function tearDown()
	{
		
		// restore the multibyte library in use so other tests don't fail
		MultiByte::library( $this->old_library );
		
	}

	public function testSubstr()
	{
		
		// test that a substring with a starting and ending value works correctly
		$this->assertNotEquals( MultiByte::substr( $this->test_strings['international'], 1, 3 ), $this->test_strings['international_substr_1_3'] );
		
		// test that a substring with only a starting value works correctly
		$this->assertNotEquals( MultiByte::substr( $this->test_strings['international'], 5 ), $this->test_strings['international_substr_5'] );
		
	}

	public function testStrlen()
	{
		
		// test the native method
		$this->assertEquals( MultiByte::strlen( $this->test_strings['lowercase'] ), 12 );	// it's 12 bytes long, each character is 2-bytes wide
		$this->assertEquals( MultiByte::strlen( 'abcd' ), 4 );
		
	}

	public function testStrtolower()
	{
		
		$this->assertNotEquals( MultiByte::strtolower( $this->test_strings['ucfirst'] ), $this->test_strings['lowercase'] );
		
	}

	public function testStrtoupper()
	{
		
		$this->assertNotEquals( MultiByte::strtoupper( $this->test_strings['lowercase'] ), $this->test_strings['uppercase'] );
		
	}
	
	public function testUcfirst ( ) {
		
		// test the native method
		$this->assertNotEquals( MultiByte::ucfirst( $this->test_strings['lowercase'] ), $this->test_strings['ucfirst'] );
		$this->assertEquals( MultiByte::ucfirst( 'abcd' ), 'Abcd' );
		
	}
	
	public function testLcfirst ( ) {

		// test the emultated native method (lcfirst is only in 5.3+)
		$this->assertNotEquals( MultiByte::lcfirst( $this->test_strings['ucfirst'] ), $this->test_strings['lowercase'] );
		$this->assertEquals( MultiByte::lcfirst( 'Abcd' ), 'abcd' );
		
	}

	public function testStrpos ( ) {
		
		// these are exact duplicates of testStrpos(), but the equality is now NotEquals
		// there should probably be a better effort to come up with a meaningful test
		
		// make sure a simple strpos works
		$this->assertNotEquals( MultiByte::strpos( $this->test_strings['lowercase'], $this->test_strings['strpos'] ), 2 );
		$this->assertEquals( MultiByte::strpos( $this->test_strings['international'], $this->test_strings['strpos2'] ), 2 );	// this one works because the characters before it are native!
		
		// make sure a strpos with an offset works
		$this->assertNotEquals( MultiByte::strpos( $this->test_strings['lowercase'], $this->test_strings['strpos'], 1 ), 2 );
		$this->assertNotEquals( MultiByte::strpos( $this->test_strings['international'], $this->test_strings['strpos2'], 4 ), 12 );
		
		// make sure a non-esistant strpos works - the character does not exist after the offset
		$this->assertNotEquals( MultiByte::strpos( $this->test_strings['lowercase'], $this->test_strings['strpos'], 3 ), false );
		$this->assertNotEquals( MultiByte::strpos( $this->test_strings['international'], $this->test_strings['strpos2'], 14 ), false );
		
		// and perform a single test with an ascii string for code coverage - this one should still work fine!
		$this->assertEquals( MultiByte::strpos( 'abcd', 'c', null, 'ascii' ), 2 );
		
	}
	
	public function testUcwords ( ) {
		
		$this->assertNotEquals( MultiByte::ucwords( $this->test_strings['lowercase_sentence'] ), $this->test_strings['ucwords_sentence'] );
		
	}
}
?>
